1. git init                      //在项目根目录去初始化一个git仓库
2. git add fileName.fileType     //可以add多个文件
3. git commit -m "message"       //commit 最好一定加本次提交附带的信息
4. git status                    //查看文件的修改状态，要随时掌握工作区的状态，使用git status命令
5. git diff fileName.fileType    //如果git status告诉你有文件被修改过，用git diff可以查看修改内容
6. git log                       //显示从最近到最远的提交日志
7. git reset --hard commitId  	 //回退版本，commitId是可以看git log里面，不一定全输入，只输入前七位git会自动搜索
8. git reflog                    //用来记录你的每一次命令，可以找回commitId
9. git checkout -- test.txt      //就是让这个文件回到最近一次git commit或git add时的状态
10.rm test.txt                   //直接在文件管理器中把没用的文件删了
11.git rm test.txt               //从版本库中删除该文件
12.git remote add origin git@github.com:michaelliao/learngit.git //把本地仓库的内容推送到GitHub仓库
13.git push -u origin master     //把本地库的所有内容推送到远程库上（第一次加-u，后面不用）
14.git clone git@github.com:michaelliao/gitskills.git   //用命令git clone克隆一个本地库
15.git checkout -b 分支名        //创建dev分支，然后切换到dev分支
16.git checkout master           //切换分支
17.git merge 分支名              //合并分支
18.git branch -d dev             //删除分支
19.git log --graph 		 //看到分支合并图
20.git merge --no-ff -m "merge with no-ff" 分支名   //强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
21.git stash 和 git stash pop    //当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
22.开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

因此，多人协作的工作模式通常是这样：

1.首先，可以试图用git push origin <branch-name>推送自己的修改；

2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

3.如果合并有冲突，则解决冲突，并在本地提交；

4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。


查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。